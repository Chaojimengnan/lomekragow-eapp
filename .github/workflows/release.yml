name: Multi-Platform Release Build

on:
  push:
    tags:
      - "v*"
  workflow_dispatch:

env:
  RUST_VERSION: "stable"

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        # FIXME: I dont know how to setup mpv on MacOS, so just skip it.
        exclude:
          - os: macos-latest
            crate: your-player
            
        crate: ["lonote", "manga-reader", "save-manager", "script-caller", "syncer", "your-player", "mychat"]
        os: [ubuntu-latest, macos-latest, windows-latest]
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            ext: ""
            platform: linux
            RUSTFLAGS: "-C opt-level=z -C link-arg=-fuse-ld=lld"
          - os: macos-latest
            target: x86_64-apple-darwin
            ext: ""
            platform: macos
            RUSTFLAGS: "-C opt-level=z"
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            ext: ".exe"
            platform: windows
            RUSTFLAGS: "-C target-feature=+crt-static"

    name: Build ${{ matrix.crate }} for ${{ matrix.platform }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}-${{ matrix.target }}

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: ${{ env.RUST_VERSION }}
          targets: ${{ matrix.target }}

      - name: Install Linux dependencies
        if: matrix.os == 'ubuntu-latest'
        shell: bash
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            lld \
            libx11-dev \
            libgl1-mesa-dev \
            libasound2-dev \
            libfontconfig1-dev \
            libglib2.0-dev \
            libcairo2-dev \
            libpango1.0-dev \
            libatk1.0-dev \
            libgdk-pixbuf-2.0-dev \
            libssl-dev \
            libxcb-shape0-dev \
            libxcb-xfixes0-dev \
            libxkbcommon-dev \
            pkg-config \
            libgtk-3-dev

          if [ "${{ matrix.crate }}" == "your-player" ]; then
            sudo apt-get install -y libmpv-dev
          fi
      

      - name: Build ${{ matrix.crate }}
        shell: bash
        run: |
          cargo build --release --target ${{ matrix.target }} --bin ${{ matrix.crate }}
        env:
          CARGO_TERM_COLOR: always
          RUSTFLAGS: ${{ matrix.RUSTFLAGS }}

      - name: Prepare artifacts
        shell: bash
        run: |
          mkdir -p release
          EXE_PATH="target/${{ matrix.target }}/release/${{ matrix.crate }}${{ matrix.ext }}"
          OUTPUT_NAME="${{ matrix.crate }}-${{ matrix.platform }}${{ matrix.ext }}"
          
          if [ -f "$EXE_PATH" ]; then
            cp "$EXE_PATH" "release/$OUTPUT_NAME"
          else
            echo "Error: Executable not found at $EXE_PATH"
            ls -la "target/${{ matrix.target }}/release/" || true
            exit 1
          fi

      - name: Strip symbols (Linux/macOS)
        if: matrix.os != 'windows-latest'
        shell: bash
        run: |
          FILE="release/${{ matrix.crate }}-${{ matrix.platform }}"
          if [ -f "$FILE" ]; then
            strip "$FILE"
          else
            echo "Error: File to strip not found: $FILE"
            exit 1
          fi

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.crate }}-${{ matrix.platform }}
          path: release/*

  create-release:
    runs-on: ubuntu-latest
    needs: build
    if: startsWith(github.ref, 'refs/tags/')
    permissions:
      contents: write
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts
          pattern: '*'
          merge-multiple: true

      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ github.ref_name }}
          name: "Release ${{ github.ref_name }}"
          body: |
            ## Multi-platform Executables
            
            **Applications:**
            - lonote
            - manga-reader
            - save-manager
            - script-caller
            - syncer
            - your-player
            - mychat
            
            **Build info:**
            - Rust: ${{ env.RUST_VERSION }}
            - Build: ${{ github.run_number }}
            
            **Note for your-player on macOS and Linux:**
            Requires [mpv](https://mpv.io/) player installed
            
            **Note:** macOS version of your-player is currently not available
          files: artifacts/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}